'''''
Querying the database created.
1. Develop a page in which a person's tax code (from a drop-down menu generated from the contents of the database table) and a podcast (from a text box) are selected, 
2. displays all of his or her appearances in the specified podcast. 
3. For each appearance, display the name of the podcast, the episode number, and the date the episode was published. 
4. Sort the appearances in descending date order.
5. Add a text field to optionally filter podcasts on the requested service. 
For the person specified in the request, display a graph showing the number of appearances for the 5 podcasts with the most
frequency. 
6. The search form must fulfil the following constraints:
    - A specific error message must be generated in case of missing data (non-optional empty fields).
    - A specific error message must be generated in case the entered service does not exist.
'''''

import streamlit as st
from Utils import execute_query
import pandas as pd

st.title("Interrogazione della base dati realizzata.")

 

# Develop a page in which, upon selecting a person's tax code 
# (from a drop-down menu generated by the contents of the database table)
query = '''SELECT CodiceFiscale FROM PERSONA'''
result_CodFiscale = execute_query(st.session_state['connection'],query)
df_CodFiscale = pd.DataFrame(result_CodFiscale)
CodFiscale = st.selectbox("Codice Fiscale", [row[0] for row in df_CodFiscale.values])

# and a podcast (from a text box)
Podcast = st.text_input("Podcast")

# Add a text field to optionally filter podcasts on the requested service.
Servizio = st.text_input("Servizio (Opzionale)")

# The search form must fulfil the following constraints:
    # - A specific error message must be generated in case of missing data (non-optional empty fields).

if Podcast != "":
    if Servizio != "": 
        check_service_query = f"SELECT * FROM INFO_PODCAST WHERE Servizio = '{Servizio}'"
        service_exists = execute_query(st.session_state['connection'], check_service_query)
        df_service = pd.DataFrame(service_exists)

        if not df_service.empty:
            servizio_clause = f"AND IP.Servizio = '{Servizio}'" 
        else:
            st.error(f"Il servizio selezionato non esiste.")
            servizio_clause = ""
    else:
        servizio_clause = ""

    # View all of his or her appearances in the specified podcast.
    # For each appearance, display the name of the podcast, the episode number, and the date the episode was published.
    # Sort the appearances in descending date order.
    query = f'''SELECT Titolo, NumeroPuntata, DataUscita 
            FROM APPARIZIONE AP, INFO_PODCAST IP
            WHERE AP.CodPodcast = IP.CodPodcast AND AP.CodiceFiscalePartecipante = '{CodFiscale}' AND IP.Titolo = '{Podcast}' {servizio_clause}
            ORDER BY DataUScita DESC'''
    result = execute_query(st.session_state['connection'],query)
    df = pd.DataFrame(result)

    if not df.empty:
        st.write("Risultato della tua richiesta")
        st.table(df)
    else:
        st.warning("La persona specificata non ha partecipato al podcast selezionato, oppure il podcast non esiste...")


else:
    st.warning("Inserire un podcast per continuare")


# For the person specified in the request display a graph showing the number of participations for the 5 podcasts with the highest frequency. 
if st.button('Show Graph'):
    query = f'''SELECT IP.Titolo, COUNT(*) as Frequency
                FROM APPARIZIONE AP, INFO_PODCAST IP
                WHERE AP.CodPodcast = IP.CodPodcast AND AP.CodiceFiscalePartecipante = '{CodFiscale}'
                GROUP BY IP.Titolo
                ORDER BY Frequency DESC
                LIMIT 5
                '''
    result = execute_query(st.session_state['connection'], query)
    df = pd.DataFrame(result, columns=['Podcast', 'Frequency'])
    st.bar_chart(df.set_index('Podcast'))